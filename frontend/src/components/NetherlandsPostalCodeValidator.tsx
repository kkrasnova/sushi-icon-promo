import React, { useState, useEffect, useCallback } from 'react';
import { findAddressByPostalCode } from '../data/netherlandsPostalCodesSimple';

interface AddressData {
  street: string;
  city: string;
  province: string;
}

interface PostalCodeValidatorProps {
  postalCode: string;
  onAddressFound: (address: AddressData) => void;
  onValidationChange: (isValid: boolean, errors: string[]) => void;
}

export const NetherlandsPostalCodeValidator: React.FC<PostalCodeValidatorProps> = ({
  postalCode,
  onAddressFound,
  onValidationChange
}) => {
  const [isLoading, setIsLoading] = useState(false);
  const [errors, setErrors] = useState<string[]>([]);

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –ø–æ—á—Ç–æ–≤–æ–≥–æ –∫–æ–¥–∞ –ù–∏–¥–µ—Ä–ª–∞–Ω–¥–æ–≤ (4 —Ü–∏—Ñ—Ä—ã + 2 –±—É–∫–≤—ã)
  const validatePostalCodeFormat = (code: string): boolean => {
    const netherlandsPostalCodeRegex = /^[1-9][0-9]{3}\s?[A-Z]{2}$/i;
    return netherlandsPostalCodeRegex.test(code);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–∞ –ø–æ –ø–æ—á—Ç–æ–≤–æ–º—É –∫–æ–¥—É
  const lookupAddressByPostalCode = async (code: string): Promise<AddressData | null> => {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const localResult = findAddressByPostalCode(code);
      console.log('–ü–æ–∏—Å–∫ –∫–æ–¥–∞:', code, '–†–µ–∑—É–ª—å—Ç–∞—Ç:', localResult);
      if (localResult) {
        return {
          street: localResult.street,
          city: localResult.city,
          province: localResult.province
        };
      }
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ, –ø—Ä–æ–±—É–µ–º API —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∑–∞–ø—Ä–æ—Å–∞
      const cleanCode = code.replace(/\s/g, '');
      
      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞
      const searchQueries = [
        `${cleanCode}, Netherlands`,
        `${cleanCode}, NL`,
        `postcode ${cleanCode}, Netherlands`,
        `${cleanCode} Netherlands`
      ];
      
      for (const query of searchQueries) {
        try {
          const response = await fetch(
            `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}&countrycodes=nl&limit=3&addressdetails=1`,
            {
              headers: {
                'User-Agent': 'SushiApp/1.0'
              }
            }
          );
          
          if (response.ok) {
            const data = await response.json();
            
            if (data && data.length > 0) {
              // –ò—â–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
              const bestResult = data.find((result: any) => {
                const address = result.address;
                return address && (address.city || address.town || address.village || address.municipality);
              }) || data[0];
              
              const address = bestResult.address;
              
              if (address && (address.city || address.town || address.village || address.municipality)) {
                return {
                  street: address.road || address.pedestrian || address.footway || address.house_number || '',
                  city: address.city || address.town || address.village || address.municipality || '',
                  province: address.state || address.province || ''
                };
              }
            }
          }
        } catch (apiError) {
          console.warn(`API –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è –¥–ª—è "${query}":`, apiError);
          continue;
        }
      }
      
      return null;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–¥—Ä–µ—Å–∞:', error);
      return null;
    }
  };

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  const validatePostalCode = useCallback(async (code: string) => {
    const newErrors: string[] = [];
    
    if (!code) {
      newErrors.push('–ü–æ—á—Ç–æ–≤—ã–π –∫–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è');
      onValidationChange(false, newErrors);
      return;
    }

    if (!validatePostalCodeFormat(code)) {
      newErrors.push('–ü–æ—á—Ç–æ–≤—ã–π –∫–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 1234 AB (4 —Ü–∏—Ñ—Ä—ã + 2 –±—É–∫–≤—ã)');
      onValidationChange(false, newErrors);
      return;
    }

    setIsLoading(true);
    setErrors([]);

    try {
      const addressData = await lookupAddressByPostalCode(code);
      
      if (addressData && addressData.street && addressData.city) {
        onAddressFound(addressData);
        onValidationChange(true, []);
      } else {
        newErrors.push('–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ—á—Ç–æ–≤–æ–≥–æ –∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é.');
        newErrors.push('üí° –°–æ–≤–µ—Ç: –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–¥—ã –∏–∑ –ø—Ä–∏–º–µ—Ä–æ–≤: 1012 JS (–ê–º—Å—Ç–µ—Ä–¥–∞–º), 3011 AD (–†–æ—Ç—Ç–µ—Ä–¥–∞–º), 2511 CS (–ì–∞–∞–≥–∞)');
        onValidationChange(false, newErrors);
      }
    } catch (error) {
      newErrors.push('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–¥—Ä–µ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      onValidationChange(false, newErrors);
    } finally {
      setIsLoading(false);
      setErrors(newErrors);
    }
  }, [onAddressFound, onValidationChange]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ—á—Ç–æ–≤–æ–≥–æ –∫–æ–¥–∞
  useEffect(() => {
    if (postalCode && postalCode.length >= 6) {
      const timeoutId = setTimeout(() => {
        validatePostalCode(postalCode);
      }, 1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

      return () => clearTimeout(timeoutId);
    }
  }, [postalCode, validatePostalCode]);

  return (
    <div className="postal-code-validator">
      {isLoading && (
        <div className="validation-loading">
          <span>–ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞...</span>
        </div>
      )}
      {errors.length > 0 && (
        <div className="validation-errors">
          {errors.map((error, index) => (
            <div key={index} className="error-message">
              {error}
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default NetherlandsPostalCodeValidator;
