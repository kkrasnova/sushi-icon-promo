import React, { useState } from 'react';
import { useTranslation } from 'react-i18next';

interface DataExporterProps {
  ownerEmail: string;
  customerCount: number;
}

type ExportFormat = 'csv' | 'json' | 'google-sheets';

export const DataExporter: React.FC<DataExporterProps> = ({ ownerEmail, customerCount }) => {
  const { t } = useTranslation();
  const [isExporting, setIsExporting] = useState(false);
  const [exportStatus, setExportStatus] = useState<{ type: 'success' | 'error'; message: string } | null>(null);

  const handleExport = async (format: ExportFormat) => {
    setIsExporting(true);
    setExportStatus(null);

    try {
      if (format === 'csv') {
        // –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
        const response = await fetch('/api/export/customers', {
          headers: {
            'x-owner-token': ownerEmail,
          },
        });

        if (!response.ok) {
          throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö');
        }

        // –°–æ–∑–¥–∞–µ–º blob –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `sushi_customers_${new Date().toISOString().split('T')[0]}.csv`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);

        setExportStatus({ type: 'success', message: '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ CSV —Ñ–∞–π–ª' });
      } else if (format === 'json') {
        // –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON –¥–ª—è Google Sheets
        const response = await fetch('/api/export/customers/json', {
          headers: {
            'x-owner-token': ownerEmail,
          },
        });

        if (!response.ok) {
          throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö');
        }

        const data = await response.json();
        
        // –°–æ–∑–¥–∞–µ–º JSON —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        const jsonString = JSON.stringify(data, null, 2);
        const blob = new Blob([jsonString], { type: 'application/json' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `sushi_customers_${new Date().toISOString().split('T')[0]}.json`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);

        setExportStatus({ type: 'success', message: `–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ JSON (${data.total} –∑–∞–ø–∏—Å–µ–π)` });
      } else if (format === 'google-sheets') {
        // –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è Google Sheets
        const instructions = `
–ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ò–ú–ü–û–†–¢–£ –í GOOGLE –¢–ê–ë–õ–ò–¶–´:

1. –°–∫–∞—á–∞–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ CSV —Ñ–æ—Ä–º–∞—Ç–µ (–∫–Ω–æ–ø–∫–∞ "–≠–∫—Å–ø–æ—Ä—Ç CSV")
2. –û—Ç–∫—Ä–æ–π—Ç–µ Google Sheets (sheets.google.com)
3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
4. –ù–∞–∂–º–∏—Ç–µ "–§–∞–π–ª" ‚Üí "–ò–º–ø–æ—Ä—Ç"
5. –í—ã–±–µ—Ä–∏—Ç–µ "–ó–∞–≥—Ä—É–∑–∏—Ç—å" –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª
6. –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏–º–ø–æ—Ä—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ:
   - –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: –ó–∞–ø—è—Ç–∞—è
   - –ö–æ–¥–∏—Ä–æ–≤–∫–∞: UTF-8
   - –ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ª–∏—Å—Ç
7. –ù–∞–∂–º–∏—Ç–µ "–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"

–ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –°–ü–û–°–û–ë:
1. –°–∫–∞—á–∞–π—Ç–µ JSON —Ñ–∞–π–ª (–∫–Ω–æ–ø–∫–∞ "–≠–∫—Å–ø–æ—Ä—Ç JSON")
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–Ω–ª–∞–π–Ω –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä JSON –≤ CSV
3. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π CSV –≤ Google Sheets

–î–û–°–¢–£–ü–ù–´–ï –î–ê–ù–ù–´–ï:
- ID –∫–ª–∏–µ–Ω—Ç–∞
- –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è
- –°—Ç—Ä–∞–Ω–∞
- –¢–µ–ª–µ—Ñ–æ–Ω –∏ email
- –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
- –ê–¥—Ä–µ—Å (–≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –ø–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å)
- –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –µ–¥–µ
- –û—Ç–∑—ã–≤—ã
- –ü—Ä–æ–º–æ–∫–æ–¥—ã
- –î–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${customerCount}
–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${new Date().toLocaleString('ru-RU')}
        `;

        // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
        const blob = new Blob([instructions], { type: 'text/plain; charset=utf-8' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `google_sheets_import_instructions_${new Date().toISOString().split('T')[0]}.txt`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);

        setExportStatus({ type: 'success', message: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è Google Sheets —Å–∫–∞—á–∞–Ω—ã' });
      }
    } catch (error) {
      console.error('Export error:', error);
      setExportStatus({ type: 'error', message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö' });
    } finally {
      setIsExporting(false);
    }
  };

  return (
    <div className="data-exporter">
      <h4 className="data-exporter__title">üìä {t("owner.export.title")}</h4>
      <p className="data-exporter__subtitle">
        {t("owner.export.subtitle")}
      </p>
      
      <div className="data-exporter__formats">
        <div className="export-format">
          <h5>üìÑ {t("owner.export.formats.csv.title")}</h5>
          <p>{t("owner.export.formats.csv.description")}</p>
          <button 
            className="button button--turquoise"
            onClick={() => handleExport('csv')}
            disabled={isExporting || customerCount === 0}
          >
            {isExporting ? t("owner.export.status.exporting") : t("owner.export.formats.csv.button")}
          </button>
        </div>

        <div className="export-format">
          <h5>üìã {t("owner.export.formats.json.title")}</h5>
          <p>{t("owner.export.formats.json.description")}</p>
          <button 
            className="button button--purple"
            onClick={() => handleExport('json')}
            disabled={isExporting || customerCount === 0}
          >
            {isExporting ? t("owner.export.status.exporting") : t("owner.export.formats.json.button")}
          </button>
        </div>

        <div className="export-format">
          <h5>üìä {t("owner.export.formats.googleSheets.title")}</h5>
          <p>{t("owner.export.formats.googleSheets.description")}</p>
          <button 
            className="button button--green"
            onClick={() => handleExport('google-sheets')}
            disabled={isExporting || customerCount === 0}
          >
            {isExporting ? t("owner.export.status.preparing") : t("owner.export.formats.googleSheets.button")}
          </button>
        </div>
      </div>

      {exportStatus && (
        <div className={`status status--${exportStatus.type}`}>
          <span className="status__message">{exportStatus.message}</span>
        </div>
      )}

      {customerCount === 0 && (
        <div className="data-exporter__empty">
          <p>‚ö†Ô∏è {t("owner.export.empty")}</p>
        </div>
      )}

      <div className="data-exporter__info">
        <h5>üí° {t("owner.export.tips.title")}</h5>
        <ul>
          <li>{t("owner.export.tips.csv")}</li>
          <li>{t("owner.export.tips.googleSheets")}</li>
          <li>{t("owner.export.tips.json")}</li>
          <li>{t("owner.export.tips.fullData")}</li>
          <li>{t("owner.export.tips.encoding")}</li>
        </ul>
      </div>
    </div>
  );
};
